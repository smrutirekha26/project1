
UART_SWITCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d40  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  00000d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000150  200000d8  00000e18  000200d8  2**2
                  ALLOC
  3 .stack        00002000  20000228  00000f68  000200d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015fc5  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002072  00000000  00000000  0003611e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a072  00000000  00000000  00038190  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000810  00000000  00000000  00042202  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d78  00000000  00000000  00042a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001c22a  00000000  00000000  0004378a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d580  00000000  00000000  0005f9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00095f81  00000000  00000000  0006cf34  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014f0  00000000  00000000  00102eb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	28 22 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     (". -...)...)...
	...
  2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
  3c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  6c:	29 01 00 00 29 01 00 00 19 0a 00 00 29 01 00 00     )...).......)...
  7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
  ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
  bc:	b510      	push	{r4, lr}
  be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
  c0:	7823      	ldrb	r3, [r4, #0]
  c2:	2b00      	cmp	r3, #0
  c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
  c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
  c8:	2b00      	cmp	r3, #0
  ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
  cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
  ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
  d0:	bf00      	nop
  d2:	2301      	movs	r3, #1
  d4:	7023      	strb	r3, [r4, #0]
  d6:	bd10      	pop	{r4, pc}
  d8:	200000d8 	.word	0x200000d8
  dc:	00000000 	.word	0x00000000
  e0:	00000d40 	.word	0x00000d40

000000e4 <frame_dummy>:
  e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
  e6:	b510      	push	{r4, lr}
  e8:	2b00      	cmp	r3, #0
  ea:	d003      	beq.n	f4 <frame_dummy+0x10>
  ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
  ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
  f0:	e000      	b.n	f4 <frame_dummy+0x10>
  f2:	bf00      	nop
  f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
  f6:	6803      	ldr	r3, [r0, #0]
  f8:	2b00      	cmp	r3, #0
  fa:	d100      	bne.n	fe <frame_dummy+0x1a>
  fc:	bd10      	pop	{r4, pc}
  fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
 100:	2b00      	cmp	r3, #0
 102:	d0fb      	beq.n	fc <frame_dummy+0x18>
 104:	4798      	blx	r3
 106:	e7f9      	b.n	fc <frame_dummy+0x18>
 108:	00000000 	.word	0x00000000
 10c:	200000dc 	.word	0x200000dc
 110:	00000d40 	.word	0x00000d40
 114:	00000d40 	.word	0x00000d40
 118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 11c:	b510      	push	{r4, lr}
	system_init();
 11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
 120:	4798      	blx	r3
}
 122:	bd10      	pop	{r4, pc}
 124:	00000251 	.word	0x00000251

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
 12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 12e:	4a17      	ldr	r2, [pc, #92]	; (18c <Reset_Handler+0x60>)
 130:	4b17      	ldr	r3, [pc, #92]	; (190 <Reset_Handler+0x64>)
 132:	429a      	cmp	r2, r3
 134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
 136:	001a      	movs	r2, r3
 138:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x68>)
 13a:	429a      	cmp	r2, r3
 13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
 13e:	4a16      	ldr	r2, [pc, #88]	; (198 <Reset_Handler+0x6c>)
 140:	3303      	adds	r3, #3
 142:	1a9b      	subs	r3, r3, r2
 144:	089b      	lsrs	r3, r3, #2
 146:	3301      	adds	r3, #1
 148:	009b      	lsls	r3, r3, #2
 14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x64>)
 14e:	490f      	ldr	r1, [pc, #60]	; (18c <Reset_Handler+0x60>)
 150:	588c      	ldr	r4, [r1, r2]
 152:	5084      	str	r4, [r0, r2]
 154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 156:	429a      	cmp	r2, r3
 158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
 15a:	4a10      	ldr	r2, [pc, #64]	; (19c <Reset_Handler+0x70>)
 15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <Reset_Handler+0x74>)
 15e:	429a      	cmp	r2, r3
 160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
 162:	43d3      	mvns	r3, r2
 164:	490e      	ldr	r1, [pc, #56]	; (1a0 <Reset_Handler+0x74>)
 166:	185b      	adds	r3, r3, r1
 168:	2103      	movs	r1, #3
 16a:	438b      	bics	r3, r1
 16c:	3304      	adds	r3, #4
 16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
 170:	2100      	movs	r1, #0
 172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
 174:	4293      	cmp	r3, r2
 176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <Reset_Handler+0x78>)
 17a:	21ff      	movs	r1, #255	; 0xff
 17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x7c>)
 17e:	438b      	bics	r3, r1
 180:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 182:	4b0a      	ldr	r3, [pc, #40]	; (1ac <Reset_Handler+0x80>)
 184:	4798      	blx	r3
        main();
 186:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x84>)
 188:	4798      	blx	r3
 18a:	e7fe      	b.n	18a <Reset_Handler+0x5e>
 18c:	00000d40 	.word	0x00000d40
 190:	20000000 	.word	0x20000000
 194:	200000d8 	.word	0x200000d8
 198:	20000004 	.word	0x20000004
 19c:	200000d8 	.word	0x200000d8
 1a0:	20000228 	.word	0x20000228
 1a4:	e000ed00 	.word	0xe000ed00
 1a8:	00000000 	.word	0x00000000
 1ac:	00000c41 	.word	0x00000c41
 1b0:	00000b21 	.word	0x00000b21

000001b4 <USART_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
 1b4:	4b06      	ldr	r3, [pc, #24]	; (1d0 <USART_0_CLOCK_init+0x1c>)
 1b6:	2140      	movs	r1, #64	; 0x40
 1b8:	22dc      	movs	r2, #220	; 0xdc
 1ba:	5099      	str	r1, [r3, r2]
 1bc:	3103      	adds	r1, #3
 1be:	3a14      	subs	r2, #20
 1c0:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM4_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM4;
 1c2:	4a04      	ldr	r2, [pc, #16]	; (1d4 <USART_0_CLOCK_init+0x20>)
 1c4:	69d3      	ldr	r3, [r2, #28]
 1c6:	3923      	subs	r1, #35	; 0x23
 1c8:	430b      	orrs	r3, r1
 1ca:	61d3      	str	r3, [r2, #28]
{

	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_CORE, CONF_GCLK_SERCOM4_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM4_GCLK_ID_SLOW, CONF_GCLK_SERCOM4_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM4_bit(MCLK);
}
 1cc:	4770      	bx	lr
 1ce:	46c0      	nop			; (mov r8, r8)
 1d0:	40001c00 	.word	0x40001c00
 1d4:	40000800 	.word	0x40000800

000001d8 <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
 1d8:	b530      	push	{r4, r5, lr}
static inline void hri_port_write_PINCFG_PMUXEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index,
                                                    bool value)
{
	uint8_t tmp;
	PORT_CRITICAL_SECTION_ENTER();
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1da:	2382      	movs	r3, #130	; 0x82
 1dc:	05db      	lsls	r3, r3, #23
 1de:	22ca      	movs	r2, #202	; 0xca
 1e0:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
 1e2:	2501      	movs	r5, #1
 1e4:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 1e6:	2401      	movs	r4, #1
 1e8:	4321      	orrs	r1, r4
 1ea:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 1ec:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 1ee:	20b5      	movs	r0, #181	; 0xb5
 1f0:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
 1f2:	3abb      	subs	r2, #187	; 0xbb
 1f4:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
 1f6:	3a0c      	subs	r2, #12
 1f8:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 1fa:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 1fc:	21cb      	movs	r1, #203	; 0xcb
 1fe:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 200:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
 202:	4322      	orrs	r2, r4
 204:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 206:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
 208:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
 20a:	39bc      	subs	r1, #188	; 0xbc
 20c:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
 20e:	3121      	adds	r1, #33	; 0x21
 210:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
 212:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB10, PINMUX_PB10D_SERCOM4_PAD2);

	gpio_set_pin_function(PB11, PINMUX_PB11D_SERCOM4_PAD3);
}
 214:	bd30      	pop	{r4, r5, pc}
	...

00000218 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
 218:	b510      	push	{r4, lr}
 21a:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
 21c:	4b06      	ldr	r3, [pc, #24]	; (238 <USART_0_init+0x20>)
 21e:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM4, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
 220:	2300      	movs	r3, #0
 222:	9300      	str	r3, [sp, #0]
 224:	3310      	adds	r3, #16
 226:	4a05      	ldr	r2, [pc, #20]	; (23c <USART_0_init+0x24>)
 228:	4905      	ldr	r1, [pc, #20]	; (240 <USART_0_init+0x28>)
 22a:	4806      	ldr	r0, [pc, #24]	; (244 <USART_0_init+0x2c>)
 22c:	4c06      	ldr	r4, [pc, #24]	; (248 <USART_0_init+0x30>)
 22e:	47a0      	blx	r4
	USART_0_PORT_init();
 230:	4b06      	ldr	r3, [pc, #24]	; (24c <USART_0_init+0x34>)
 232:	4798      	blx	r3
}
 234:	b002      	add	sp, #8
 236:	bd10      	pop	{r4, pc}
 238:	000001b5 	.word	0x000001b5
 23c:	200000f4 	.word	0x200000f4
 240:	42001400 	.word	0x42001400
 244:	200001d8 	.word	0x200001d8
 248:	000004d5 	.word	0x000004d5
 24c:	000001d9 	.word	0x000001d9

00000250 <system_init>:

void system_init(void)
{
 250:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 252:	4b0b      	ldr	r3, [pc, #44]	; (280 <system_init+0x30>)
 254:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
 256:	23c0      	movs	r3, #192	; 0xc0
 258:	05db      	lsls	r3, r3, #23
 25a:	2280      	movs	r2, #128	; 0x80
 25c:	0212      	lsls	r2, r2, #8
 25e:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
 260:	609a      	str	r2, [r3, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
 262:	2382      	movs	r3, #130	; 0x82
 264:	05db      	lsls	r3, r3, #23
 266:	4a07      	ldr	r2, [pc, #28]	; (284 <system_init+0x34>)
 268:	629a      	str	r2, [r3, #40]	; 0x28
 26a:	22c0      	movs	r2, #192	; 0xc0
 26c:	0612      	lsls	r2, r2, #24
 26e:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
 270:	214f      	movs	r1, #79	; 0x4f
 272:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
 274:	2001      	movs	r0, #1
 276:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
 278:	545a      	strb	r2, [r3, r1]
	// Set pin direction to output
	gpio_set_pin_direction(LED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LED, GPIO_PIN_FUNCTION_OFF);

	USART_0_init();
 27a:	4b03      	ldr	r3, [pc, #12]	; (288 <system_init+0x38>)
 27c:	4798      	blx	r3
}
 27e:	bd10      	pop	{r4, pc}
 280:	00000719 	.word	0x00000719
 284:	40008000 	.word	0x40008000
 288:	00000219 	.word	0x00000219

0000028c <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 28c:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
 290:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 292:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 294:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
 298:	4770      	bx	lr

0000029a <atomic_leave_critical>:
 29a:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
 29e:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 2a0:	f383 8810 	msr	PRIMASK, r3
}
 2a4:	4770      	bx	lr
	...

000002a8 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
 2a8:	b570      	push	{r4, r5, r6, lr}
 2aa:	0006      	movs	r6, r0
 2ac:	000c      	movs	r4, r1
 2ae:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 2b0:	2800      	cmp	r0, #0
 2b2:	d00d      	beq.n	2d0 <io_write+0x28>
 2b4:	0008      	movs	r0, r1
 2b6:	1e43      	subs	r3, r0, #1
 2b8:	4198      	sbcs	r0, r3
 2ba:	b2c0      	uxtb	r0, r0
 2bc:	2234      	movs	r2, #52	; 0x34
 2be:	4905      	ldr	r1, [pc, #20]	; (2d4 <io_write+0x2c>)
 2c0:	4b05      	ldr	r3, [pc, #20]	; (2d8 <io_write+0x30>)
 2c2:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
 2c4:	6833      	ldr	r3, [r6, #0]
 2c6:	002a      	movs	r2, r5
 2c8:	0021      	movs	r1, r4
 2ca:	0030      	movs	r0, r6
 2cc:	4798      	blx	r3
}
 2ce:	bd70      	pop	{r4, r5, r6, pc}
 2d0:	2000      	movs	r0, #0
 2d2:	e7f3      	b.n	2bc <io_write+0x14>
 2d4:	00000cac 	.word	0x00000cac
 2d8:	00000611 	.word	0x00000611

000002dc <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
 2dc:	b570      	push	{r4, r5, r6, lr}
 2de:	0006      	movs	r6, r0
 2e0:	000c      	movs	r4, r1
 2e2:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
 2e4:	2800      	cmp	r0, #0
 2e6:	d00d      	beq.n	304 <io_read+0x28>
 2e8:	0008      	movs	r0, r1
 2ea:	1e43      	subs	r3, r0, #1
 2ec:	4198      	sbcs	r0, r3
 2ee:	b2c0      	uxtb	r0, r0
 2f0:	223d      	movs	r2, #61	; 0x3d
 2f2:	4905      	ldr	r1, [pc, #20]	; (308 <io_read+0x2c>)
 2f4:	4b05      	ldr	r3, [pc, #20]	; (30c <io_read+0x30>)
 2f6:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
 2f8:	6873      	ldr	r3, [r6, #4]
 2fa:	002a      	movs	r2, r5
 2fc:	0021      	movs	r1, r4
 2fe:	0030      	movs	r0, r6
 300:	4798      	blx	r3
}
 302:	bd70      	pop	{r4, r5, r6, pc}
 304:	2000      	movs	r0, #0
 306:	e7f3      	b.n	2f0 <io_read+0x14>
 308:	00000cac 	.word	0x00000cac
 30c:	00000611 	.word	0x00000611

00000310 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
 310:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 312:	3808      	subs	r0, #8

	descr->stat = 0;
 314:	2300      	movs	r3, #0
 316:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
 318:	6a43      	ldr	r3, [r0, #36]	; 0x24
 31a:	2b00      	cmp	r3, #0
 31c:	d000      	beq.n	320 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
 31e:	4798      	blx	r3
	}
}
 320:	bd10      	pop	{r4, pc}

00000322 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
 322:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 324:	3808      	subs	r0, #8

	descr->stat = 0;
 326:	2300      	movs	r3, #0
 328:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
 32a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 32c:	2b00      	cmp	r3, #0
 32e:	d000      	beq.n	332 <usart_error+0x10>
		descr->usart_cb.error(descr);
 330:	4798      	blx	r3
	}
}
 332:	bd10      	pop	{r4, pc}

00000334 <usart_fill_rx_buffer>:
{
 334:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 336:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
 338:	302c      	adds	r0, #44	; 0x2c
 33a:	4b04      	ldr	r3, [pc, #16]	; (34c <usart_fill_rx_buffer+0x18>)
 33c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
 33e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
 340:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
 342:	2b00      	cmp	r3, #0
 344:	d001      	beq.n	34a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
 346:	0020      	movs	r0, r4
 348:	4798      	blx	r3
}
 34a:	bd10      	pop	{r4, pc}
 34c:	000006b5 	.word	0x000006b5

00000350 <usart_async_write>:
{
 350:	b570      	push	{r4, r5, r6, lr}
 352:	0004      	movs	r4, r0
 354:	000e      	movs	r6, r1
 356:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
 358:	2800      	cmp	r0, #0
 35a:	d01d      	beq.n	398 <usart_async_write+0x48>
 35c:	2900      	cmp	r1, #0
 35e:	d01d      	beq.n	39c <usart_async_write+0x4c>
 360:	0010      	movs	r0, r2
 362:	1e43      	subs	r3, r0, #1
 364:	4198      	sbcs	r0, r3
 366:	223c      	movs	r2, #60	; 0x3c
 368:	32ff      	adds	r2, #255	; 0xff
 36a:	490f      	ldr	r1, [pc, #60]	; (3a8 <usart_async_write+0x58>)
 36c:	4b0f      	ldr	r3, [pc, #60]	; (3ac <usart_async_write+0x5c>)
 36e:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
 370:	2344      	movs	r3, #68	; 0x44
 372:	5ae2      	ldrh	r2, [r4, r3]
 374:	3308      	adds	r3, #8
 376:	5ae3      	ldrh	r3, [r4, r3]
 378:	429a      	cmp	r2, r3
 37a:	d111      	bne.n	3a0 <usart_async_write+0x50>
	descr->tx_buffer        = (uint8_t *)buf;
 37c:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
 37e:	234c      	movs	r3, #76	; 0x4c
 380:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
 382:	2200      	movs	r2, #0
 384:	3b08      	subs	r3, #8
 386:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
 388:	3b43      	subs	r3, #67	; 0x43
 38a:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
 38c:	0020      	movs	r0, r4
 38e:	3008      	adds	r0, #8
 390:	4b07      	ldr	r3, [pc, #28]	; (3b0 <usart_async_write+0x60>)
 392:	4798      	blx	r3
	return (int32_t)length;
 394:	0028      	movs	r0, r5
}
 396:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
 398:	2000      	movs	r0, #0
 39a:	e7e4      	b.n	366 <usart_async_write+0x16>
 39c:	2000      	movs	r0, #0
 39e:	e7e2      	b.n	366 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
 3a0:	201c      	movs	r0, #28
 3a2:	4240      	negs	r0, r0
 3a4:	e7f7      	b.n	396 <usart_async_write+0x46>
 3a6:	46c0      	nop			; (mov r8, r8)
 3a8:	00000cc0 	.word	0x00000cc0
 3ac:	00000611 	.word	0x00000611
 3b0:	00000995 	.word	0x00000995

000003b4 <usart_process_byte_sent>:
{
 3b4:	b570      	push	{r4, r5, r6, lr}
 3b6:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
 3b8:	0001      	movs	r1, r0
 3ba:	3908      	subs	r1, #8
 3bc:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 3be:	224c      	movs	r2, #76	; 0x4c
 3c0:	5a8a      	ldrh	r2, [r1, r2]
 3c2:	429a      	cmp	r2, r3
 3c4:	d00c      	beq.n	3e0 <usart_process_byte_sent+0x2c>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
 3c6:	000a      	movs	r2, r1
 3c8:	6c89      	ldr	r1, [r1, #72]	; 0x48
 3ca:	1c5d      	adds	r5, r3, #1
 3cc:	2044      	movs	r0, #68	; 0x44
 3ce:	5215      	strh	r5, [r2, r0]
 3d0:	5cc9      	ldrb	r1, [r1, r3]
 3d2:	0020      	movs	r0, r4
 3d4:	4b04      	ldr	r3, [pc, #16]	; (3e8 <usart_process_byte_sent+0x34>)
 3d6:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
 3d8:	0020      	movs	r0, r4
 3da:	4b04      	ldr	r3, [pc, #16]	; (3ec <usart_process_byte_sent+0x38>)
 3dc:	4798      	blx	r3
}
 3de:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
 3e0:	4b03      	ldr	r3, [pc, #12]	; (3f0 <usart_process_byte_sent+0x3c>)
 3e2:	4798      	blx	r3
}
 3e4:	e7fb      	b.n	3de <usart_process_byte_sent+0x2a>
 3e6:	46c0      	nop			; (mov r8, r8)
 3e8:	0000098d 	.word	0x0000098d
 3ec:	00000995 	.word	0x00000995
 3f0:	0000099d 	.word	0x0000099d

000003f4 <usart_async_read>:
{
 3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 3f6:	46ce      	mov	lr, r9
 3f8:	4647      	mov	r7, r8
 3fa:	b580      	push	{r7, lr}
 3fc:	b085      	sub	sp, #20
 3fe:	0005      	movs	r5, r0
 400:	000e      	movs	r6, r1
 402:	0017      	movs	r7, r2
	ASSERT(descr && buf && length);
 404:	2800      	cmp	r0, #0
 406:	d015      	beq.n	434 <usart_async_read+0x40>
 408:	2900      	cmp	r1, #0
 40a:	d013      	beq.n	434 <usart_async_read+0x40>
 40c:	2a00      	cmp	r2, #0
 40e:	d12a      	bne.n	466 <usart_async_read+0x72>
 410:	22ac      	movs	r2, #172	; 0xac
 412:	0052      	lsls	r2, r2, #1
 414:	4929      	ldr	r1, [pc, #164]	; (4bc <usart_async_read+0xc8>)
 416:	2000      	movs	r0, #0
 418:	4b29      	ldr	r3, [pc, #164]	; (4c0 <usart_async_read+0xcc>)
 41a:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 41c:	a803      	add	r0, sp, #12
 41e:	4b29      	ldr	r3, [pc, #164]	; (4c4 <usart_async_read+0xd0>)
 420:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 422:	0028      	movs	r0, r5
 424:	3034      	adds	r0, #52	; 0x34
 426:	4b28      	ldr	r3, [pc, #160]	; (4c8 <usart_async_read+0xd4>)
 428:	4798      	blx	r3
	CRITICAL_SECTION_LEAVE()
 42a:	a803      	add	r0, sp, #12
 42c:	4b27      	ldr	r3, [pc, #156]	; (4cc <usart_async_read+0xd8>)
 42e:	4798      	blx	r3
	uint16_t                       was_read = 0;
 430:	2500      	movs	r5, #0
	return (int32_t)was_read;
 432:	e03c      	b.n	4ae <usart_async_read+0xba>
	ASSERT(descr && buf && length);
 434:	22ac      	movs	r2, #172	; 0xac
 436:	0052      	lsls	r2, r2, #1
 438:	4920      	ldr	r1, [pc, #128]	; (4bc <usart_async_read+0xc8>)
 43a:	2000      	movs	r0, #0
 43c:	4b20      	ldr	r3, [pc, #128]	; (4c0 <usart_async_read+0xcc>)
 43e:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 440:	a803      	add	r0, sp, #12
 442:	4b20      	ldr	r3, [pc, #128]	; (4c4 <usart_async_read+0xd0>)
 444:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 446:	3534      	adds	r5, #52	; 0x34
 448:	0028      	movs	r0, r5
 44a:	9501      	str	r5, [sp, #4]
 44c:	4b1e      	ldr	r3, [pc, #120]	; (4c8 <usart_async_read+0xd4>)
 44e:	4798      	blx	r3
 450:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
 452:	a803      	add	r0, sp, #12
 454:	4b1d      	ldr	r3, [pc, #116]	; (4cc <usart_async_read+0xd8>)
 456:	4798      	blx	r3
	uint16_t                       was_read = 0;
 458:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
 45a:	4643      	mov	r3, r8
 45c:	2b00      	cmp	r3, #0
 45e:	d026      	beq.n	4ae <usart_async_read+0xba>
 460:	2f00      	cmp	r7, #0
 462:	d116      	bne.n	492 <usart_async_read+0x9e>
 464:	e023      	b.n	4ae <usart_async_read+0xba>
	ASSERT(descr && buf && length);
 466:	22ac      	movs	r2, #172	; 0xac
 468:	0052      	lsls	r2, r2, #1
 46a:	4914      	ldr	r1, [pc, #80]	; (4bc <usart_async_read+0xc8>)
 46c:	2001      	movs	r0, #1
 46e:	4b14      	ldr	r3, [pc, #80]	; (4c0 <usart_async_read+0xcc>)
 470:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
 472:	a803      	add	r0, sp, #12
 474:	4b13      	ldr	r3, [pc, #76]	; (4c4 <usart_async_read+0xd0>)
 476:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
 478:	3534      	adds	r5, #52	; 0x34
 47a:	0028      	movs	r0, r5
 47c:	9501      	str	r5, [sp, #4]
 47e:	4b12      	ldr	r3, [pc, #72]	; (4c8 <usart_async_read+0xd4>)
 480:	4798      	blx	r3
 482:	4680      	mov	r8, r0
	CRITICAL_SECTION_LEAVE()
 484:	a803      	add	r0, sp, #12
 486:	4b11      	ldr	r3, [pc, #68]	; (4cc <usart_async_read+0xd8>)
 488:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
 48a:	4643      	mov	r3, r8
	uint16_t                       was_read = 0;
 48c:	2500      	movs	r5, #0
	while ((was_read < num) && (was_read < length)) {
 48e:	2b00      	cmp	r3, #0
 490:	d00d      	beq.n	4ae <usart_async_read+0xba>
{
 492:	2400      	movs	r4, #0
		ringbuffer_get(&descr->rx, &buf[was_read++]);
 494:	4b0e      	ldr	r3, [pc, #56]	; (4d0 <usart_async_read+0xdc>)
 496:	4699      	mov	r9, r3
 498:	1c65      	adds	r5, r4, #1
 49a:	b2ad      	uxth	r5, r5
 49c:	1931      	adds	r1, r6, r4
 49e:	9801      	ldr	r0, [sp, #4]
 4a0:	47c8      	blx	r9
 4a2:	3401      	adds	r4, #1
	while ((was_read < num) && (was_read < length)) {
 4a4:	4544      	cmp	r4, r8
 4a6:	d202      	bcs.n	4ae <usart_async_read+0xba>
 4a8:	b2a3      	uxth	r3, r4
 4aa:	429f      	cmp	r7, r3
 4ac:	d8f4      	bhi.n	498 <usart_async_read+0xa4>
}
 4ae:	0028      	movs	r0, r5
 4b0:	b005      	add	sp, #20
 4b2:	bc0c      	pop	{r2, r3}
 4b4:	4690      	mov	r8, r2
 4b6:	4699      	mov	r9, r3
 4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 4ba:	46c0      	nop			; (mov r8, r8)
 4bc:	00000cc0 	.word	0x00000cc0
 4c0:	00000611 	.word	0x00000611
 4c4:	0000028d 	.word	0x0000028d
 4c8:	000006f5 	.word	0x000006f5
 4cc:	0000029b 	.word	0x0000029b
 4d0:	0000066d 	.word	0x0000066d

000004d4 <usart_async_init>:
{
 4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4d6:	0004      	movs	r4, r0
 4d8:	000d      	movs	r5, r1
 4da:	0016      	movs	r6, r2
 4dc:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 4de:	2800      	cmp	r0, #0
 4e0:	d026      	beq.n	530 <usart_async_init+0x5c>
 4e2:	2900      	cmp	r1, #0
 4e4:	d026      	beq.n	534 <usart_async_init+0x60>
 4e6:	2a00      	cmp	r2, #0
 4e8:	d026      	beq.n	538 <usart_async_init+0x64>
 4ea:	0018      	movs	r0, r3
 4ec:	1e43      	subs	r3, r0, #1
 4ee:	4198      	sbcs	r0, r3
 4f0:	223a      	movs	r2, #58	; 0x3a
 4f2:	4914      	ldr	r1, [pc, #80]	; (544 <usart_async_init+0x70>)
 4f4:	4b14      	ldr	r3, [pc, #80]	; (548 <usart_async_init+0x74>)
 4f6:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
 4f8:	0020      	movs	r0, r4
 4fa:	3034      	adds	r0, #52	; 0x34
 4fc:	003a      	movs	r2, r7
 4fe:	0031      	movs	r1, r6
 500:	4b12      	ldr	r3, [pc, #72]	; (54c <usart_async_init+0x78>)
 502:	4798      	blx	r3
 504:	2800      	cmp	r0, #0
 506:	d119      	bne.n	53c <usart_async_init+0x68>
	init_status = _usart_async_init(&descr->device, hw);
 508:	0020      	movs	r0, r4
 50a:	3008      	adds	r0, #8
 50c:	0029      	movs	r1, r5
 50e:	4b10      	ldr	r3, [pc, #64]	; (550 <usart_async_init+0x7c>)
 510:	4798      	blx	r3
	if (init_status) {
 512:	2800      	cmp	r0, #0
 514:	d10b      	bne.n	52e <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
 516:	4b0f      	ldr	r3, [pc, #60]	; (554 <usart_async_init+0x80>)
 518:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
 51a:	4b0f      	ldr	r3, [pc, #60]	; (558 <usart_async_init+0x84>)
 51c:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
 51e:	4b0f      	ldr	r3, [pc, #60]	; (55c <usart_async_init+0x88>)
 520:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
 522:	4b0f      	ldr	r3, [pc, #60]	; (560 <usart_async_init+0x8c>)
 524:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
 526:	4b0f      	ldr	r3, [pc, #60]	; (564 <usart_async_init+0x90>)
 528:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
 52a:	4b0f      	ldr	r3, [pc, #60]	; (568 <usart_async_init+0x94>)
 52c:	6163      	str	r3, [r4, #20]
}
 52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
 530:	2000      	movs	r0, #0
 532:	e7dd      	b.n	4f0 <usart_async_init+0x1c>
 534:	2000      	movs	r0, #0
 536:	e7db      	b.n	4f0 <usart_async_init+0x1c>
 538:	2000      	movs	r0, #0
 53a:	e7d9      	b.n	4f0 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
 53c:	200d      	movs	r0, #13
 53e:	4240      	negs	r0, r0
 540:	e7f5      	b.n	52e <usart_async_init+0x5a>
 542:	46c0      	nop			; (mov r8, r8)
 544:	00000cc0 	.word	0x00000cc0
 548:	00000611 	.word	0x00000611
 54c:	00000619 	.word	0x00000619
 550:	000008fd 	.word	0x000008fd
 554:	000003f5 	.word	0x000003f5
 558:	00000351 	.word	0x00000351
 55c:	000003b5 	.word	0x000003b5
 560:	00000335 	.word	0x00000335
 564:	00000311 	.word	0x00000311
 568:	00000323 	.word	0x00000323

0000056c <usart_async_enable>:
{
 56c:	b510      	push	{r4, lr}
 56e:	0004      	movs	r4, r0
	ASSERT(descr);
 570:	1e43      	subs	r3, r0, #1
 572:	4198      	sbcs	r0, r3
 574:	b2c0      	uxtb	r0, r0
 576:	2261      	movs	r2, #97	; 0x61
 578:	4904      	ldr	r1, [pc, #16]	; (58c <usart_async_enable+0x20>)
 57a:	4b05      	ldr	r3, [pc, #20]	; (590 <usart_async_enable+0x24>)
 57c:	4798      	blx	r3
	_usart_async_enable(&descr->device);
 57e:	0020      	movs	r0, r4
 580:	3008      	adds	r0, #8
 582:	4b04      	ldr	r3, [pc, #16]	; (594 <usart_async_enable+0x28>)
 584:	4798      	blx	r3
}
 586:	2000      	movs	r0, #0
 588:	bd10      	pop	{r4, pc}
 58a:	46c0      	nop			; (mov r8, r8)
 58c:	00000cc0 	.word	0x00000cc0
 590:	00000611 	.word	0x00000611
 594:	00000979 	.word	0x00000979

00000598 <usart_async_register_callback>:
{
 598:	b570      	push	{r4, r5, r6, lr}
 59a:	0005      	movs	r5, r0
 59c:	000e      	movs	r6, r1
 59e:	0014      	movs	r4, r2
	ASSERT(descr);
 5a0:	1e43      	subs	r3, r0, #1
 5a2:	4198      	sbcs	r0, r3
 5a4:	b2c0      	uxtb	r0, r0
 5a6:	2283      	movs	r2, #131	; 0x83
 5a8:	4916      	ldr	r1, [pc, #88]	; (604 <usart_async_register_callback+0x6c>)
 5aa:	4b17      	ldr	r3, [pc, #92]	; (608 <usart_async_register_callback+0x70>)
 5ac:	4798      	blx	r3
	switch (type) {
 5ae:	2e01      	cmp	r6, #1
 5b0:	d011      	beq.n	5d6 <usart_async_register_callback+0x3e>
 5b2:	2e00      	cmp	r6, #0
 5b4:	d004      	beq.n	5c0 <usart_async_register_callback+0x28>
 5b6:	2e02      	cmp	r6, #2
 5b8:	d018      	beq.n	5ec <usart_async_register_callback+0x54>
		return ERR_INVALID_ARG;
 5ba:	200d      	movs	r0, #13
 5bc:	4240      	negs	r0, r0
 5be:	e009      	b.n	5d4 <usart_async_register_callback+0x3c>
		descr->usart_cb.rx_done = cb;
 5c0:	62ac      	str	r4, [r5, #40]	; 0x28
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_RX_DONE, NULL != cb);
 5c2:	1e62      	subs	r2, r4, #1
 5c4:	4194      	sbcs	r4, r2
 5c6:	b2e2      	uxtb	r2, r4
 5c8:	0028      	movs	r0, r5
 5ca:	3008      	adds	r0, #8
 5cc:	2101      	movs	r1, #1
 5ce:	4b0f      	ldr	r3, [pc, #60]	; (60c <usart_async_register_callback+0x74>)
 5d0:	4798      	blx	r3
	return ERR_NONE;
 5d2:	2000      	movs	r0, #0
}
 5d4:	bd70      	pop	{r4, r5, r6, pc}
		descr->usart_cb.tx_done = cb;
 5d6:	626c      	str	r4, [r5, #36]	; 0x24
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_TX_DONE, NULL != cb);
 5d8:	1e62      	subs	r2, r4, #1
 5da:	4194      	sbcs	r4, r2
 5dc:	b2e2      	uxtb	r2, r4
 5de:	0028      	movs	r0, r5
 5e0:	3008      	adds	r0, #8
 5e2:	2102      	movs	r1, #2
 5e4:	4b09      	ldr	r3, [pc, #36]	; (60c <usart_async_register_callback+0x74>)
 5e6:	4798      	blx	r3
	return ERR_NONE;
 5e8:	2000      	movs	r0, #0
		break;
 5ea:	e7f3      	b.n	5d4 <usart_async_register_callback+0x3c>
		descr->usart_cb.error = cb;
 5ec:	62ec      	str	r4, [r5, #44]	; 0x2c
		_usart_async_set_irq_state(&descr->device, USART_ASYNC_ERROR, NULL != cb);
 5ee:	1e62      	subs	r2, r4, #1
 5f0:	4194      	sbcs	r4, r2
 5f2:	b2e2      	uxtb	r2, r4
 5f4:	0028      	movs	r0, r5
 5f6:	3008      	adds	r0, #8
 5f8:	2103      	movs	r1, #3
 5fa:	4b04      	ldr	r3, [pc, #16]	; (60c <usart_async_register_callback+0x74>)
 5fc:	4798      	blx	r3
	return ERR_NONE;
 5fe:	2000      	movs	r0, #0
		break;
 600:	e7e8      	b.n	5d4 <usart_async_register_callback+0x3c>
 602:	46c0      	nop			; (mov r8, r8)
 604:	00000cc0 	.word	0x00000cc0
 608:	00000611 	.word	0x00000611
 60c:	000009a5 	.word	0x000009a5

00000610 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
 610:	2800      	cmp	r0, #0
 612:	d100      	bne.n	616 <assert+0x6>
		__asm("BKPT #0");
 614:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
 616:	4770      	bx	lr

00000618 <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
 618:	b570      	push	{r4, r5, r6, lr}
 61a:	0004      	movs	r4, r0
 61c:	000e      	movs	r6, r1
 61e:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
 620:	2800      	cmp	r0, #0
 622:	d00b      	beq.n	63c <ringbuffer_init+0x24>
 624:	2900      	cmp	r1, #0
 626:	d018      	beq.n	65a <ringbuffer_init+0x42>
 628:	2001      	movs	r0, #1
 62a:	2a00      	cmp	r2, #0
 62c:	d107      	bne.n	63e <ringbuffer_init+0x26>
 62e:	2228      	movs	r2, #40	; 0x28
 630:	490c      	ldr	r1, [pc, #48]	; (664 <ringbuffer_init+0x4c>)
 632:	2000      	movs	r0, #0
 634:	4b0c      	ldr	r3, [pc, #48]	; (668 <ringbuffer_init+0x50>)
 636:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
 638:	1e6b      	subs	r3, r5, #1
 63a:	e007      	b.n	64c <ringbuffer_init+0x34>
	ASSERT(rb && buf && size);
 63c:	2000      	movs	r0, #0
 63e:	2228      	movs	r2, #40	; 0x28
 640:	4908      	ldr	r1, [pc, #32]	; (664 <ringbuffer_init+0x4c>)
 642:	4b09      	ldr	r3, [pc, #36]	; (668 <ringbuffer_init+0x50>)
 644:	4798      	blx	r3
	if ((size & (size - 1)) != 0) {
 646:	1e6b      	subs	r3, r5, #1
 648:	422b      	tst	r3, r5
 64a:	d108      	bne.n	65e <ringbuffer_init+0x46>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
 64c:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
 64e:	2300      	movs	r3, #0
 650:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
 652:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
 654:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
 656:	2000      	movs	r0, #0
}
 658:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
 65a:	2000      	movs	r0, #0
 65c:	e7ef      	b.n	63e <ringbuffer_init+0x26>
		return ERR_INVALID_ARG;
 65e:	200d      	movs	r0, #13
 660:	4240      	negs	r0, r0
 662:	e7f9      	b.n	658 <ringbuffer_init+0x40>
 664:	00000ce0 	.word	0x00000ce0
 668:	00000611 	.word	0x00000611

0000066c <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
 66c:	b570      	push	{r4, r5, r6, lr}
 66e:	0004      	movs	r4, r0
 670:	000d      	movs	r5, r1
	ASSERT(rb && data);
 672:	2800      	cmp	r0, #0
 674:	d015      	beq.n	6a2 <ringbuffer_get+0x36>
 676:	0008      	movs	r0, r1
 678:	1e43      	subs	r3, r0, #1
 67a:	4198      	sbcs	r0, r3
 67c:	b2c0      	uxtb	r0, r0
 67e:	2240      	movs	r2, #64	; 0x40
 680:	490a      	ldr	r1, [pc, #40]	; (6ac <ringbuffer_get+0x40>)
 682:	4b0b      	ldr	r3, [pc, #44]	; (6b0 <ringbuffer_get+0x44>)
 684:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
 686:	68a3      	ldr	r3, [r4, #8]
 688:	68e2      	ldr	r2, [r4, #12]
 68a:	429a      	cmp	r2, r3
 68c:	d00b      	beq.n	6a6 <ringbuffer_get+0x3a>
		*data = rb->buf[rb->read_index & rb->size];
 68e:	6862      	ldr	r2, [r4, #4]
 690:	4013      	ands	r3, r2
 692:	6822      	ldr	r2, [r4, #0]
 694:	5cd3      	ldrb	r3, [r2, r3]
 696:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
 698:	68a3      	ldr	r3, [r4, #8]
 69a:	3301      	adds	r3, #1
 69c:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
 69e:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
 6a0:	bd70      	pop	{r4, r5, r6, pc}
 6a2:	2000      	movs	r0, #0
 6a4:	e7eb      	b.n	67e <ringbuffer_get+0x12>
	return ERR_NOT_FOUND;
 6a6:	200a      	movs	r0, #10
 6a8:	4240      	negs	r0, r0
 6aa:	e7f9      	b.n	6a0 <ringbuffer_get+0x34>
 6ac:	00000ce0 	.word	0x00000ce0
 6b0:	00000611 	.word	0x00000611

000006b4 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
 6b4:	b570      	push	{r4, r5, r6, lr}
 6b6:	0004      	movs	r4, r0
 6b8:	000d      	movs	r5, r1
	ASSERT(rb);
 6ba:	1e43      	subs	r3, r0, #1
 6bc:	4198      	sbcs	r0, r3
 6be:	b2c0      	uxtb	r0, r0
 6c0:	2251      	movs	r2, #81	; 0x51
 6c2:	490a      	ldr	r1, [pc, #40]	; (6ec <ringbuffer_put+0x38>)
 6c4:	4b0a      	ldr	r3, [pc, #40]	; (6f0 <ringbuffer_put+0x3c>)
 6c6:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
 6c8:	6863      	ldr	r3, [r4, #4]
 6ca:	68e2      	ldr	r2, [r4, #12]
 6cc:	4013      	ands	r3, r2
 6ce:	6822      	ldr	r2, [r4, #0]
 6d0:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
 6d2:	68e3      	ldr	r3, [r4, #12]
 6d4:	6861      	ldr	r1, [r4, #4]
 6d6:	68a2      	ldr	r2, [r4, #8]
 6d8:	1a9a      	subs	r2, r3, r2
 6da:	428a      	cmp	r2, r1
 6dc:	d901      	bls.n	6e2 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
 6de:	1a59      	subs	r1, r3, r1
 6e0:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
 6e2:	3301      	adds	r3, #1
 6e4:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
 6e6:	2000      	movs	r0, #0
 6e8:	bd70      	pop	{r4, r5, r6, pc}
 6ea:	46c0      	nop			; (mov r8, r8)
 6ec:	00000ce0 	.word	0x00000ce0
 6f0:	00000611 	.word	0x00000611

000006f4 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
 6f4:	b510      	push	{r4, lr}
 6f6:	0004      	movs	r4, r0
	ASSERT(rb);
 6f8:	1e43      	subs	r3, r0, #1
 6fa:	4198      	sbcs	r0, r3
 6fc:	b2c0      	uxtb	r0, r0
 6fe:	2267      	movs	r2, #103	; 0x67
 700:	4903      	ldr	r1, [pc, #12]	; (710 <ringbuffer_num+0x1c>)
 702:	4b04      	ldr	r3, [pc, #16]	; (714 <ringbuffer_num+0x20>)
 704:	4798      	blx	r3

	return rb->write_index - rb->read_index;
 706:	68e0      	ldr	r0, [r4, #12]
 708:	68a3      	ldr	r3, [r4, #8]
 70a:	1ac0      	subs	r0, r0, r3
}
 70c:	bd10      	pop	{r4, pc}
 70e:	46c0      	nop			; (mov r8, r8)
 710:	00000ce0 	.word	0x00000ce0
 714:	00000611 	.word	0x00000611

00000718 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 718:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 71a:	4b08      	ldr	r3, [pc, #32]	; (73c <_init_chip+0x24>)
 71c:	685a      	ldr	r2, [r3, #4]
 71e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 720:	4b07      	ldr	r3, [pc, #28]	; (740 <_init_chip+0x28>)
 722:	4798      	blx	r3
	_oscctrl_init_sources();
 724:	4b07      	ldr	r3, [pc, #28]	; (744 <_init_chip+0x2c>)
 726:	4798      	blx	r3
	_mclk_init();
 728:	4b07      	ldr	r3, [pc, #28]	; (748 <_init_chip+0x30>)
 72a:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 72c:	4b07      	ldr	r3, [pc, #28]	; (74c <_init_chip+0x34>)
 72e:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 730:	20ff      	movs	r0, #255	; 0xff
 732:	4b07      	ldr	r3, [pc, #28]	; (750 <_init_chip+0x38>)
 734:	4798      	blx	r3

	_div_init();
 736:	4b07      	ldr	r3, [pc, #28]	; (754 <_init_chip+0x3c>)
 738:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 73a:	bd10      	pop	{r4, pc}
 73c:	41004000 	.word	0x41004000
 740:	00000805 	.word	0x00000805
 744:	0000081d 	.word	0x0000081d
 748:	000007f9 	.word	0x000007f9
 74c:	0000085d 	.word	0x0000085d
 750:	000007d5 	.word	0x000007d5
 754:	00000759 	.word	0x00000759

00000758 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
 758:	2290      	movs	r2, #144	; 0x90
 75a:	05d2      	lsls	r2, r2, #23
 75c:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
 75e:	2102      	movs	r1, #2
 760:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
 762:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
 764:	4770      	bx	lr

00000766 <__aeabi_uidiv>:

/**
 * \brief Do unsigned division
 */
uint32_t __aeabi_uidiv(uint32_t numerator, uint32_t denominator)
{
 766:	b510      	push	{r4, lr}
 768:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 76a:	f3ef 8310 	mrs	r3, PRIMASK
	uint32_t res;
	_DIVAS_CRITICAL_ENTER();
 76e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 770:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
 772:	2390      	movs	r3, #144	; 0x90
 774:	05db      	lsls	r3, r3, #23
 776:	781a      	ldrb	r2, [r3, #0]
 778:	2401      	movs	r4, #1
 77a:	43a2      	bics	r2, r4
 77c:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
 77e:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
 780:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
 782:	001a      	movs	r2, r3
 784:	7913      	ldrb	r3, [r2, #4]
 786:	07db      	lsls	r3, r3, #31
 788:	d4fc      	bmi.n	784 <__aeabi_uidiv+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result32();
 78a:	2390      	movs	r3, #144	; 0x90
 78c:	05db      	lsls	r3, r3, #23
 78e:	6918      	ldr	r0, [r3, #16]
	_DIVAS_CRITICAL_LEAVE();
 790:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 792:	f383 8810 	msr	PRIMASK, r3
	return res;
}
 796:	b002      	add	sp, #8
 798:	bd10      	pop	{r4, pc}
	...

0000079c <__aeabi_uidivmod>:

/**
 * \brief Do unsigned division, return result and remainder
 */
uint64_t __aeabi_uidivmod(unsigned numerator, unsigned denominator)
{
 79c:	b510      	push	{r4, lr}
 79e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 7a0:	f3ef 8310 	mrs	r3, PRIMASK
	uint64_t res;
	_DIVAS_CRITICAL_ENTER();
 7a4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 7a6:	b672      	cpsid	i
	DIVAS->CTRLA.bit.SIGNED = s;
 7a8:	2390      	movs	r3, #144	; 0x90
 7aa:	05db      	lsls	r3, r3, #23
 7ac:	781a      	ldrb	r2, [r3, #0]
 7ae:	2401      	movs	r4, #1
 7b0:	43a2      	bics	r2, r4
 7b2:	701a      	strb	r2, [r3, #0]
	DIVAS->DIVIDEND.reg     = n;
 7b4:	6098      	str	r0, [r3, #8]
	DIVAS->DIVISOR.reg      = d;
 7b6:	60d9      	str	r1, [r3, #12]
	while (DIVAS->STATUS.bit.BUSY) {
 7b8:	001a      	movs	r2, r3
 7ba:	7913      	ldrb	r3, [r2, #4]
 7bc:	07db      	lsls	r3, r3, #31
 7be:	d4fc      	bmi.n	7ba <__aeabi_uidivmod+0x1e>
	_divas_div(0, numerator, denominator);
	res = _divas_result64();
 7c0:	4b03      	ldr	r3, [pc, #12]	; (7d0 <__aeabi_uidivmod+0x34>)
 7c2:	6818      	ldr	r0, [r3, #0]
 7c4:	6859      	ldr	r1, [r3, #4]
	_DIVAS_CRITICAL_LEAVE();
 7c6:	9b01      	ldr	r3, [sp, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 7c8:	f383 8810 	msr	PRIMASK, r3
	return res;
}
 7cc:	b002      	add	sp, #8
 7ce:	bd10      	pop	{r4, pc}
 7d0:	48000010 	.word	0x48000010

000007d4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 7d4:	07c3      	lsls	r3, r0, #31
 7d6:	d507      	bpl.n	7e8 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 7d8:	4a04      	ldr	r2, [pc, #16]	; (7ec <_gclk_init_generators_by_fref+0x18>)
 7da:	4b05      	ldr	r3, [pc, #20]	; (7f0 <_gclk_init_generators_by_fref+0x1c>)
 7dc:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 7de:	0019      	movs	r1, r3
 7e0:	4a04      	ldr	r2, [pc, #16]	; (7f4 <_gclk_init_generators_by_fref+0x20>)
 7e2:	684b      	ldr	r3, [r1, #4]
 7e4:	4213      	tst	r3, r2
 7e6:	d1fc      	bne.n	7e2 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
 7e8:	4770      	bx	lr
 7ea:	46c0      	nop			; (mov r8, r8)
 7ec:	00010106 	.word	0x00010106
 7f0:	40001c00 	.word	0x40001c00
 7f4:	000007fd 	.word	0x000007fd

000007f8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
 7f8:	2201      	movs	r2, #1
 7fa:	4b01      	ldr	r3, [pc, #4]	; (800 <_mclk_init+0x8>)
 7fc:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 7fe:	4770      	bx	lr
 800:	40000800 	.word	0x40000800

00000804 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 804:	4b04      	ldr	r3, [pc, #16]	; (818 <_osc32kctrl_init_sources+0x14>)
 806:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 808:	21f8      	movs	r1, #248	; 0xf8
 80a:	0149      	lsls	r1, r1, #5
 80c:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 80e:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 810:	2201      	movs	r2, #1
 812:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 814:	4770      	bx	lr
 816:	46c0      	nop			; (mov r8, r8)
 818:	40001400 	.word	0x40001400

0000081c <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
 81c:	4b0e      	ldr	r3, [pc, #56]	; (858 <_oscctrl_init_sources+0x3c>)
 81e:	2202      	movs	r2, #2
 820:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
 822:	3209      	adds	r2, #9
 824:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
 826:	0019      	movs	r1, r3
 828:	3a07      	subs	r2, #7
 82a:	698b      	ldr	r3, [r1, #24]
 82c:	421a      	tst	r2, r3
 82e:	d1fc      	bne.n	82a <_oscctrl_init_sources+0xe>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
 830:	4909      	ldr	r1, [pc, #36]	; (858 <_oscctrl_init_sources+0x3c>)
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
 832:	2204      	movs	r2, #4
 834:	698b      	ldr	r3, [r1, #24]
 836:	421a      	tst	r2, r3
 838:	d1fc      	bne.n	834 <_oscctrl_init_sources+0x18>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
 83a:	2207      	movs	r2, #7
 83c:	4b06      	ldr	r3, [pc, #24]	; (858 <_oscctrl_init_sources+0x3c>)
 83e:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
 840:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
 842:	3209      	adds	r2, #9
 844:	68cb      	ldr	r3, [r1, #12]
 846:	421a      	tst	r2, r3
 848:	d0fc      	beq.n	844 <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
 84a:	4a03      	ldr	r2, [pc, #12]	; (858 <_oscctrl_init_sources+0x3c>)
 84c:	7d13      	ldrb	r3, [r2, #20]
 84e:	2180      	movs	r1, #128	; 0x80
 850:	430b      	orrs	r3, r1
 852:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 854:	4770      	bx	lr
 856:	46c0      	nop			; (mov r8, r8)
 858:	40001000 	.word	0x40001000

0000085c <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 85c:	4770      	bx	lr
	...

00000860 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
 860:	b510      	push	{r4, lr}
 862:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 864:	4b1f      	ldr	r3, [pc, #124]	; (8e4 <_usart_init+0x84>)
 866:	18c3      	adds	r3, r0, r3
 868:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
 86a:	b2db      	uxtb	r3, r3
 86c:	2b04      	cmp	r3, #4
 86e:	d004      	beq.n	87a <_usart_init+0x1a>
	ASSERT(false);
 870:	4a1d      	ldr	r2, [pc, #116]	; (8e8 <_usart_init+0x88>)
 872:	491e      	ldr	r1, [pc, #120]	; (8ec <_usart_init+0x8c>)
 874:	2000      	movs	r0, #0
 876:	4b1e      	ldr	r3, [pc, #120]	; (8f0 <_usart_init+0x90>)
 878:	4798      	blx	r3
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
 87a:	69e3      	ldr	r3, [r4, #28]
	uint8_t i = _get_sercom_index(hw);

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
 87c:	07db      	lsls	r3, r3, #31
 87e:	d418      	bmi.n	8b2 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 880:	2203      	movs	r2, #3
 882:	69e3      	ldr	r3, [r4, #28]
 884:	421a      	tst	r2, r3
 886:	d1fc      	bne.n	882 <_usart_init+0x22>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
 888:	6823      	ldr	r3, [r4, #0]
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
 88a:	079b      	lsls	r3, r3, #30
 88c:	d50b      	bpl.n	8a6 <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
 88e:	6823      	ldr	r3, [r4, #0]
 890:	2202      	movs	r2, #2
 892:	4393      	bics	r3, r2
 894:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 896:	3201      	adds	r2, #1
 898:	69e3      	ldr	r3, [r4, #28]
 89a:	421a      	tst	r2, r3
 89c:	d1fc      	bne.n	898 <_usart_init+0x38>
 89e:	2202      	movs	r2, #2
 8a0:	69e3      	ldr	r3, [r4, #28]
 8a2:	421a      	tst	r2, r3
 8a4:	d1fc      	bne.n	8a0 <_usart_init+0x40>
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
 8a6:	2305      	movs	r3, #5
 8a8:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 8aa:	2203      	movs	r2, #3
 8ac:	69e3      	ldr	r3, [r4, #28]
 8ae:	421a      	tst	r2, r3
 8b0:	d1fc      	bne.n	8ac <_usart_init+0x4c>
 8b2:	2201      	movs	r2, #1
 8b4:	69e3      	ldr	r3, [r4, #28]
 8b6:	421a      	tst	r2, r3
 8b8:	d1fc      	bne.n	8b4 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
 8ba:	4b0e      	ldr	r3, [pc, #56]	; (8f4 <_usart_init+0x94>)
 8bc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 8be:	2203      	movs	r2, #3
 8c0:	69e3      	ldr	r3, [r4, #28]
 8c2:	421a      	tst	r2, r3
 8c4:	d1fc      	bne.n	8c0 <_usart_init+0x60>
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
 8c6:	23c0      	movs	r3, #192	; 0xc0
 8c8:	029b      	lsls	r3, r3, #10
 8ca:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 8cc:	2207      	movs	r2, #7
 8ce:	69e3      	ldr	r3, [r4, #28]
 8d0:	421a      	tst	r2, r3
 8d2:	d1fc      	bne.n	8ce <_usart_init+0x6e>
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
 8d4:	4b08      	ldr	r3, [pc, #32]	; (8f8 <_usart_init+0x98>)
 8d6:	81a3      	strh	r3, [r4, #12]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
 8d8:	2300      	movs	r3, #0
 8da:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
 8dc:	2230      	movs	r2, #48	; 0x30
 8de:	54a3      	strb	r3, [r4, r2]

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);

	return ERR_NONE;
}
 8e0:	2000      	movs	r0, #0
 8e2:	bd10      	pop	{r4, pc}
 8e4:	bdfffc00 	.word	0xbdfffc00
 8e8:	0000025e 	.word	0x0000025e
 8ec:	00000d04 	.word	0x00000d04
 8f0:	00000611 	.word	0x00000611
 8f4:	40310004 	.word	0x40310004
 8f8:	fffff62b 	.word	0xfffff62b

000008fc <_usart_async_init>:
{
 8fc:	b570      	push	{r4, r5, r6, lr}
 8fe:	0005      	movs	r5, r0
 900:	000c      	movs	r4, r1
	ASSERT(device);
 902:	1e43      	subs	r3, r0, #1
 904:	4198      	sbcs	r0, r3
 906:	b2c0      	uxtb	r0, r0
 908:	22c4      	movs	r2, #196	; 0xc4
 90a:	4914      	ldr	r1, [pc, #80]	; (95c <_usart_async_init+0x60>)
 90c:	4b14      	ldr	r3, [pc, #80]	; (960 <_usart_async_init+0x64>)
 90e:	4798      	blx	r3
	init_status = _usart_init(hw);
 910:	0020      	movs	r0, r4
 912:	4b14      	ldr	r3, [pc, #80]	; (964 <_usart_async_init+0x68>)
 914:	4798      	blx	r3
	if (init_status) {
 916:	2800      	cmp	r0, #0
 918:	d000      	beq.n	91c <_usart_async_init+0x20>
}
 91a:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
 91c:	61ac      	str	r4, [r5, #24]
	if (hw == SERCOM4) {
 91e:	4b12      	ldr	r3, [pc, #72]	; (968 <_usart_async_init+0x6c>)
 920:	429c      	cmp	r4, r3
 922:	d017      	beq.n	954 <_usart_async_init+0x58>
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
 924:	4b11      	ldr	r3, [pc, #68]	; (96c <_usart_async_init+0x70>)
 926:	469c      	mov	ip, r3
 928:	4464      	add	r4, ip
 92a:	0aa4      	lsrs	r4, r4, #10
/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 92c:	3409      	adds	r4, #9
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 92e:	b2e3      	uxtb	r3, r4
 930:	0622      	lsls	r2, r4, #24
 932:	d4f2      	bmi.n	91a <_usart_async_init+0x1e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 934:	221f      	movs	r2, #31
 936:	401a      	ands	r2, r3
 938:	2301      	movs	r3, #1
 93a:	4093      	lsls	r3, r2
 93c:	4a0c      	ldr	r2, [pc, #48]	; (970 <_usart_async_init+0x74>)
 93e:	2180      	movs	r1, #128	; 0x80
 940:	5053      	str	r3, [r2, r1]
  __ASM volatile ("dsb 0xF":::"memory");
 942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 946:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 94a:	3101      	adds	r1, #1
 94c:	31ff      	adds	r1, #255	; 0xff
 94e:	5053      	str	r3, [r2, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 950:	6013      	str	r3, [r2, #0]
 952:	e7e2      	b.n	91a <_usart_async_init+0x1e>
		_sercom4_dev = (struct _usart_async_device *)dev;
 954:	4b07      	ldr	r3, [pc, #28]	; (974 <_usart_async_init+0x78>)
 956:	601d      	str	r5, [r3, #0]
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
 958:	230d      	movs	r3, #13
 95a:	e7eb      	b.n	934 <_usart_async_init+0x38>
 95c:	00000d04 	.word	0x00000d04
 960:	00000611 	.word	0x00000611
 964:	00000861 	.word	0x00000861
 968:	42001400 	.word	0x42001400
 96c:	bdfffc00 	.word	0xbdfffc00
 970:	e000e100 	.word	0xe000e100
 974:	20000104 	.word	0x20000104

00000978 <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
 978:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
 97a:	6813      	ldr	r3, [r2, #0]
 97c:	2102      	movs	r1, #2
 97e:	430b      	orrs	r3, r1
 980:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
 982:	3101      	adds	r1, #1
 984:	69d3      	ldr	r3, [r2, #28]
 986:	4219      	tst	r1, r3
 988:	d1fc      	bne.n	984 <_usart_async_enable+0xc>
}
 98a:	4770      	bx	lr

0000098c <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
 98c:	6983      	ldr	r3, [r0, #24]
 98e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
 990:	8519      	strh	r1, [r3, #40]	; 0x28
}
 992:	4770      	bx	lr

00000994 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
 994:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 996:	2201      	movs	r2, #1
 998:	759a      	strb	r2, [r3, #22]
}
 99a:	4770      	bx	lr

0000099c <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
 99c:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 99e:	2202      	movs	r2, #2
 9a0:	759a      	strb	r2, [r3, #22]
}
 9a2:	4770      	bx	lr

000009a4 <_usart_async_set_irq_state>:
{
 9a4:	b570      	push	{r4, r5, r6, lr}
 9a6:	0004      	movs	r4, r0
 9a8:	000d      	movs	r5, r1
 9aa:	0016      	movs	r6, r2
	ASSERT(device);
 9ac:	1e43      	subs	r3, r0, #1
 9ae:	4198      	sbcs	r0, r3
 9b0:	b2c0      	uxtb	r0, r0
 9b2:	4a16      	ldr	r2, [pc, #88]	; (a0c <_usart_async_set_irq_state+0x68>)
 9b4:	4916      	ldr	r1, [pc, #88]	; (a10 <_usart_async_set_irq_state+0x6c>)
 9b6:	4b17      	ldr	r3, [pc, #92]	; (a14 <_usart_async_set_irq_state+0x70>)
 9b8:	4798      	blx	r3
	if (USART_ASYNC_BYTE_SENT == type || USART_ASYNC_TX_DONE == type) {
 9ba:	2302      	movs	r3, #2
 9bc:	002a      	movs	r2, r5
 9be:	439a      	bics	r2, r3
 9c0:	d10e      	bne.n	9e0 <_usart_async_set_irq_state+0x3c>
		hri_sercomusart_write_INTEN_DRE_bit(device->hw, state);
 9c2:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 9c4:	2e00      	cmp	r6, #0
 9c6:	d105      	bne.n	9d4 <_usart_async_set_irq_state+0x30>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 9c8:	2201      	movs	r2, #1
 9ca:	751a      	strb	r2, [r3, #20]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
 9cc:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 9ce:	3201      	adds	r2, #1
 9d0:	751a      	strb	r2, [r3, #20]
}
 9d2:	bd70      	pop	{r4, r5, r6, pc}
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
 9d4:	2201      	movs	r2, #1
 9d6:	759a      	strb	r2, [r3, #22]
		hri_sercomusart_write_INTEN_TXC_bit(device->hw, state);
 9d8:	69a3      	ldr	r3, [r4, #24]
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
 9da:	3201      	adds	r2, #1
 9dc:	759a      	strb	r2, [r3, #22]
 9de:	e7f8      	b.n	9d2 <_usart_async_set_irq_state+0x2e>
	} else if (USART_ASYNC_RX_DONE == type) {
 9e0:	2d01      	cmp	r5, #1
 9e2:	d007      	beq.n	9f4 <_usart_async_set_irq_state+0x50>
	} else if (USART_ASYNC_ERROR == type) {
 9e4:	2d03      	cmp	r5, #3
 9e6:	d1f4      	bne.n	9d2 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_ERROR_bit(device->hw, state);
 9e8:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 9ea:	2e00      	cmp	r6, #0
 9ec:	d00b      	beq.n	a06 <_usart_async_set_irq_state+0x62>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_ERROR;
 9ee:	2280      	movs	r2, #128	; 0x80
 9f0:	759a      	strb	r2, [r3, #22]
}
 9f2:	e7ee      	b.n	9d2 <_usart_async_set_irq_state+0x2e>
		hri_sercomusart_write_INTEN_RXC_bit(device->hw, state);
 9f4:	69a3      	ldr	r3, [r4, #24]
	if (value == 0x0) {
 9f6:	2e00      	cmp	r6, #0
 9f8:	d102      	bne.n	a00 <_usart_async_set_irq_state+0x5c>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_RXC;
 9fa:	2204      	movs	r2, #4
 9fc:	751a      	strb	r2, [r3, #20]
 9fe:	e7e8      	b.n	9d2 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_RXC;
 a00:	2204      	movs	r2, #4
 a02:	759a      	strb	r2, [r3, #22]
 a04:	e7e5      	b.n	9d2 <_usart_async_set_irq_state+0x2e>
		((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_ERROR;
 a06:	2280      	movs	r2, #128	; 0x80
 a08:	751a      	strb	r2, [r3, #20]
 a0a:	e7e2      	b.n	9d2 <_usart_async_set_irq_state+0x2e>
 a0c:	0000021e 	.word	0x0000021e
 a10:	00000d04 	.word	0x00000d04
 a14:	00000611 	.word	0x00000611

00000a18 <SERCOM4_Handler>:

	return NULL;
}

void SERCOM4_Handler(void)
{
 a18:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom4_dev);
 a1a:	4b19      	ldr	r3, [pc, #100]	; (a80 <SERCOM4_Handler+0x68>)
 a1c:	6818      	ldr	r0, [r3, #0]
	void *hw = device->hw;
 a1e:	6984      	ldr	r4, [r0, #24]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
 a20:	7e23      	ldrb	r3, [r4, #24]
	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
 a22:	07db      	lsls	r3, r3, #31
 a24:	d502      	bpl.n	a2c <SERCOM4_Handler+0x14>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
 a26:	7da3      	ldrb	r3, [r4, #22]
 a28:	07db      	lsls	r3, r3, #31
 a2a:	d40f      	bmi.n	a4c <SERCOM4_Handler+0x34>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
 a2c:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
 a2e:	079b      	lsls	r3, r3, #30
 a30:	d502      	bpl.n	a38 <SERCOM4_Handler+0x20>
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
 a32:	7da3      	ldrb	r3, [r4, #22]
 a34:	079b      	lsls	r3, r3, #30
 a36:	d40e      	bmi.n	a56 <SERCOM4_Handler+0x3e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
 a38:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
 a3a:	075b      	lsls	r3, r3, #29
 a3c:	d515      	bpl.n	a6a <SERCOM4_Handler+0x52>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
 a3e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
 a40:	2337      	movs	r3, #55	; 0x37
 a42:	421a      	tst	r2, r3
 a44:	d00c      	beq.n	a60 <SERCOM4_Handler+0x48>
	((Sercom *)hw)->USART.STATUS.reg = mask;
 a46:	3348      	adds	r3, #72	; 0x48
 a48:	8363      	strh	r3, [r4, #26]
}
 a4a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
 a4c:	2301      	movs	r3, #1
 a4e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
 a50:	6803      	ldr	r3, [r0, #0]
 a52:	4798      	blx	r3
 a54:	e7f9      	b.n	a4a <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
 a56:	2302      	movs	r3, #2
 a58:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
 a5a:	6883      	ldr	r3, [r0, #8]
 a5c:	4798      	blx	r3
 a5e:	e7f4      	b.n	a4a <SERCOM4_Handler+0x32>
	return ((Sercom *)hw)->USART.DATA.reg;
 a60:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
 a62:	b2c9      	uxtb	r1, r1
 a64:	6843      	ldr	r3, [r0, #4]
 a66:	4798      	blx	r3
 a68:	e7ef      	b.n	a4a <SERCOM4_Handler+0x32>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
 a6a:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
 a6c:	09db      	lsrs	r3, r3, #7
 a6e:	d0ec      	beq.n	a4a <SERCOM4_Handler+0x32>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
 a70:	2380      	movs	r3, #128	; 0x80
 a72:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
 a74:	68c3      	ldr	r3, [r0, #12]
 a76:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
 a78:	8b63      	ldrh	r3, [r4, #26]
 a7a:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
 a7c:	8363      	strh	r3, [r4, #26]
}
 a7e:	e7e4      	b.n	a4a <SERCOM4_Handler+0x32>
 a80:	20000104 	.word	0x20000104

00000a84 <serial_tx_cb>:
 *
 */
static void serial_tx_cb(const struct usart_async_descriptor *const io_descr)
{
	/* Do Nothing */
}
 a84:	4770      	bx	lr
	...

00000a88 <serial_rx_cb>:
{
 a88:	b510      	push	{r4, lr}
 a8a:	b082      	sub	sp, #8
	count = io_read(&USART_0.io, &ch, 1);
 a8c:	2201      	movs	r2, #1
 a8e:	466b      	mov	r3, sp
 a90:	1dd9      	adds	r1, r3, #7
 a92:	481f      	ldr	r0, [pc, #124]	; (b10 <serial_rx_cb+0x88>)
 a94:	4b1f      	ldr	r3, [pc, #124]	; (b14 <serial_rx_cb+0x8c>)
 a96:	4798      	blx	r3
 a98:	b2c1      	uxtb	r1, r0
	if (serial_receiving == 0)
 a9a:	4b1f      	ldr	r3, [pc, #124]	; (b18 <serial_rx_cb+0x90>)
 a9c:	781b      	ldrb	r3, [r3, #0]
 a9e:	2b00      	cmp	r3, #0
 aa0:	d112      	bne.n	ac8 <serial_rx_cb+0x40>
		if (ch != '\r' && ch != '\n')
 aa2:	466b      	mov	r3, sp
 aa4:	79da      	ldrb	r2, [r3, #7]
 aa6:	2a0d      	cmp	r2, #13
 aa8:	d024      	beq.n	af4 <serial_rx_cb+0x6c>
 aaa:	2a0a      	cmp	r2, #10
 aac:	d022      	beq.n	af4 <serial_rx_cb+0x6c>
			serial_receiving = 1;
 aae:	4b1a      	ldr	r3, [pc, #104]	; (b18 <serial_rx_cb+0x90>)
 ab0:	2001      	movs	r0, #1
 ab2:	7018      	strb	r0, [r3, #0]
			serial_received_bytes_counter = 0;
 ab4:	2000      	movs	r0, #0
 ab6:	7058      	strb	r0, [r3, #1]
			rx_buffer[serial_received_bytes_counter] = ch;
 ab8:	7858      	ldrb	r0, [r3, #1]
 aba:	1818      	adds	r0, r3, r0
 abc:	7102      	strb	r2, [r0, #4]
			serial_received_bytes_counter += count;
 abe:	7858      	ldrb	r0, [r3, #1]
 ac0:	1840      	adds	r0, r0, r1
 ac2:	b2c0      	uxtb	r0, r0
 ac4:	7058      	strb	r0, [r3, #1]
 ac6:	e015      	b.n	af4 <serial_rx_cb+0x6c>
		rx_buffer[serial_received_bytes_counter] = ch;
 ac8:	4b13      	ldr	r3, [pc, #76]	; (b18 <serial_rx_cb+0x90>)
 aca:	785a      	ldrb	r2, [r3, #1]
 acc:	4668      	mov	r0, sp
 ace:	79c4      	ldrb	r4, [r0, #7]
 ad0:	189a      	adds	r2, r3, r2
 ad2:	7114      	strb	r4, [r2, #4]
		serial_received_bytes_counter += count;
 ad4:	7858      	ldrb	r0, [r3, #1]
 ad6:	1840      	adds	r0, r0, r1
 ad8:	b2c0      	uxtb	r0, r0
 ada:	7058      	strb	r0, [r3, #1]
		if (ch == '\r' || ch == '\n')
 adc:	2c0d      	cmp	r4, #13
 ade:	d00b      	beq.n	af8 <serial_rx_cb+0x70>
 ae0:	2c0a      	cmp	r4, #10
 ae2:	d009      	beq.n	af8 <serial_rx_cb+0x70>
		if (serial_received_bytes_counter >= SERIAL_BUFFER_SIZE)
 ae4:	4b0c      	ldr	r3, [pc, #48]	; (b18 <serial_rx_cb+0x90>)
 ae6:	785b      	ldrb	r3, [r3, #1]
 ae8:	b2db      	uxtb	r3, r3
 aea:	2bc7      	cmp	r3, #199	; 0xc7
 aec:	d902      	bls.n	af4 <serial_rx_cb+0x6c>
			serial_received_bytes_counter = 0;
 aee:	2200      	movs	r2, #0
 af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <serial_rx_cb+0x90>)
 af2:	705a      	strb	r2, [r3, #1]
}
 af4:	b002      	add	sp, #8
 af6:	bd10      	pop	{r4, pc}
			serial_complete = 1;
 af8:	4a08      	ldr	r2, [pc, #32]	; (b1c <serial_rx_cb+0x94>)
 afa:	2101      	movs	r1, #1
 afc:	234c      	movs	r3, #76	; 0x4c
 afe:	54d1      	strb	r1, [r2, r3]
			total_bytes = serial_received_bytes_counter - 2;
 b00:	4b05      	ldr	r3, [pc, #20]	; (b18 <serial_rx_cb+0x90>)
 b02:	785b      	ldrb	r3, [r3, #1]
 b04:	3b02      	subs	r3, #2
 b06:	b2db      	uxtb	r3, r3
 b08:	314c      	adds	r1, #76	; 0x4c
 b0a:	5453      	strb	r3, [r2, r1]
 b0c:	e7ea      	b.n	ae4 <serial_rx_cb+0x5c>
 b0e:	46c0      	nop			; (mov r8, r8)
 b10:	200001d8 	.word	0x200001d8
 b14:	000002dd 	.word	0x000002dd
 b18:	20000108 	.word	0x20000108
 b1c:	20000188 	.word	0x20000188

00000b20 <main>:

int main(void)
{
 b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 b22:	46de      	mov	lr, fp
 b24:	4657      	mov	r7, sl
 b26:	464e      	mov	r6, r9
 b28:	4645      	mov	r5, r8
 b2a:	b5e0      	push	{r5, r6, r7, lr}
 b2c:	b085      	sub	sp, #20
	uint8_t temp;
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 b2e:	4b36      	ldr	r3, [pc, #216]	; (c08 <main+0xe8>)
 b30:	4798      	blx	r3
	
	// Initialise ASYNC Driver
	usart_async_register_callback(&USART_0, USART_ASYNC_TXC_CB, serial_tx_cb);
 b32:	4c36      	ldr	r4, [pc, #216]	; (c0c <main+0xec>)
 b34:	4a36      	ldr	r2, [pc, #216]	; (c10 <main+0xf0>)
 b36:	2101      	movs	r1, #1
 b38:	0020      	movs	r0, r4
 b3a:	4d36      	ldr	r5, [pc, #216]	; (c14 <main+0xf4>)
 b3c:	47a8      	blx	r5
	usart_async_register_callback(&USART_0, USART_ASYNC_RXC_CB, serial_rx_cb);
 b3e:	4a36      	ldr	r2, [pc, #216]	; (c18 <main+0xf8>)
 b40:	2100      	movs	r1, #0
 b42:	0020      	movs	r0, r4
 b44:	47a8      	blx	r5
	usart_async_enable(&USART_0);
 b46:	0020      	movs	r0, r4
 b48:	4b34      	ldr	r3, [pc, #208]	; (c1c <main+0xfc>)
 b4a:	4798      	blx	r3

	/* Replace with your application code */
	while (1)
	{
		// Check if we're receiving
		if (serial_receiving == 1)
 b4c:	4d34      	ldr	r5, [pc, #208]	; (c20 <main+0x100>)
		{
			// Check if we're complete
			if (serial_complete == 1)
 b4e:	4b35      	ldr	r3, [pc, #212]	; (c24 <main+0x104>)
 b50:	4698      	mov	r8, r3
				// Reset Flags
				serial_receiving = 0;
				serial_complete = 0;
				
				// Copy Message to TX Buffer
				memcpy(&tx_buffer[14], &rx_buffer[0], SERIAL_BUFFER_SIZE);
 b52:	4b35      	ldr	r3, [pc, #212]	; (c28 <main+0x108>)
 b54:	330e      	adds	r3, #14
 b56:	9300      	str	r3, [sp, #0]
 b58:	002b      	movs	r3, r5
 b5a:	3304      	adds	r3, #4
 b5c:	9301      	str	r3, [sp, #4]
 b5e:	e00a      	b.n	b76 <main+0x56>
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
 b60:	2280      	movs	r2, #128	; 0x80
 b62:	0212      	lsls	r2, r2, #8
 b64:	23c0      	movs	r3, #192	; 0xc0
 b66:	05db      	lsls	r3, r3, #23
 b68:	61da      	str	r2, [r3, #28]
				// Print a Message
				//io_write(&USART_0.io, tx_buffer, total_bytes + 16);
				gpio_toggle_pin_level(LED);
				
				// Clear Memory
				memset(&rx_buffer, 0x00, SERIAL_BUFFER_SIZE);
 b6a:	22c8      	movs	r2, #200	; 0xc8
 b6c:	2100      	movs	r1, #0
 b6e:	482c      	ldr	r0, [pc, #176]	; (c20 <main+0x100>)
 b70:	3004      	adds	r0, #4
 b72:	4b2e      	ldr	r3, [pc, #184]	; (c2c <main+0x10c>)
 b74:	4798      	blx	r3
			if (serial_complete == 1)
 b76:	224c      	movs	r2, #76	; 0x4c
		if (serial_receiving == 1)
 b78:	782b      	ldrb	r3, [r5, #0]
 b7a:	2b01      	cmp	r3, #1
 b7c:	d1fc      	bne.n	b78 <main+0x58>
			if (serial_complete == 1)
 b7e:	4643      	mov	r3, r8
 b80:	5c9b      	ldrb	r3, [r3, r2]
 b82:	2b01      	cmp	r3, #1
 b84:	d1f8      	bne.n	b78 <main+0x58>
				serial_receiving = 0;
 b86:	2300      	movs	r3, #0
 b88:	4a25      	ldr	r2, [pc, #148]	; (c20 <main+0x100>)
 b8a:	7013      	strb	r3, [r2, #0]
				serial_complete = 0;
 b8c:	4c25      	ldr	r4, [pc, #148]	; (c24 <main+0x104>)
 b8e:	224c      	movs	r2, #76	; 0x4c
 b90:	54a3      	strb	r3, [r4, r2]
				memcpy(&tx_buffer[14], &rx_buffer[0], SERIAL_BUFFER_SIZE);
 b92:	327c      	adds	r2, #124	; 0x7c
 b94:	9901      	ldr	r1, [sp, #4]
 b96:	9e00      	ldr	r6, [sp, #0]
 b98:	0030      	movs	r0, r6
 b9a:	4b25      	ldr	r3, [pc, #148]	; (c30 <main+0x110>)
 b9c:	4798      	blx	r3
				for(int i=0;i<=total_bytes;i++)
 b9e:	234d      	movs	r3, #77	; 0x4d
 ba0:	5ce3      	ldrb	r3, [r4, r3]
 ba2:	2300      	movs	r3, #0
 ba4:	4699      	mov	r9, r3
					temp=tx_buffer[14+i]/100+48;
 ba6:	4b23      	ldr	r3, [pc, #140]	; (c34 <main+0x114>)
 ba8:	469b      	mov	fp, r3
					io_write(&USART_0.io,&temp,1);
 baa:	4f23      	ldr	r7, [pc, #140]	; (c38 <main+0x118>)
					temp=tx_buffer[14+i]/100+48;
 bac:	ab02      	add	r3, sp, #8
 bae:	1ddc      	adds	r4, r3, #7
 bb0:	7830      	ldrb	r0, [r6, #0]
 bb2:	2164      	movs	r1, #100	; 0x64
 bb4:	47d8      	blx	fp
 bb6:	3030      	adds	r0, #48	; 0x30
 bb8:	7020      	strb	r0, [r4, #0]
					io_write(&USART_0.io,&temp,1);
 bba:	2201      	movs	r2, #1
 bbc:	0021      	movs	r1, r4
 bbe:	4813      	ldr	r0, [pc, #76]	; (c0c <main+0xec>)
 bc0:	47b8      	blx	r7
					temp=(tx_buffer[14+i]/10%10)+48;
 bc2:	7830      	ldrb	r0, [r6, #0]
 bc4:	210a      	movs	r1, #10
 bc6:	47d8      	blx	fp
 bc8:	b2c0      	uxtb	r0, r0
 bca:	4b1c      	ldr	r3, [pc, #112]	; (c3c <main+0x11c>)
 bcc:	469a      	mov	sl, r3
 bce:	210a      	movs	r1, #10
 bd0:	4798      	blx	r3
 bd2:	3130      	adds	r1, #48	; 0x30
 bd4:	7021      	strb	r1, [r4, #0]
					io_write(&USART_0.io,&temp,1);
 bd6:	2201      	movs	r2, #1
 bd8:	0021      	movs	r1, r4
 bda:	480c      	ldr	r0, [pc, #48]	; (c0c <main+0xec>)
 bdc:	47b8      	blx	r7
					temp=tx_buffer[14+i]%10+48;
 bde:	7830      	ldrb	r0, [r6, #0]
 be0:	210a      	movs	r1, #10
 be2:	47d0      	blx	sl
 be4:	3130      	adds	r1, #48	; 0x30
 be6:	7021      	strb	r1, [r4, #0]
					io_write(&USART_0.io,&temp,1);
 be8:	2201      	movs	r2, #1
 bea:	0021      	movs	r1, r4
 bec:	4807      	ldr	r0, [pc, #28]	; (c0c <main+0xec>)
 bee:	47b8      	blx	r7
				for(int i=0;i<=total_bytes;i++)
 bf0:	2301      	movs	r3, #1
 bf2:	469c      	mov	ip, r3
 bf4:	44e1      	add	r9, ip
 bf6:	334c      	adds	r3, #76	; 0x4c
 bf8:	4a0a      	ldr	r2, [pc, #40]	; (c24 <main+0x104>)
 bfa:	5cd3      	ldrb	r3, [r2, r3]
 bfc:	b2db      	uxtb	r3, r3
 bfe:	3601      	adds	r6, #1
 c00:	454b      	cmp	r3, r9
 c02:	dad3      	bge.n	bac <main+0x8c>
 c04:	e7ac      	b.n	b60 <main+0x40>
 c06:	46c0      	nop			; (mov r8, r8)
 c08:	0000011d 	.word	0x0000011d
 c0c:	200001d8 	.word	0x200001d8
 c10:	00000a85 	.word	0x00000a85
 c14:	00000599 	.word	0x00000599
 c18:	00000a89 	.word	0x00000a89
 c1c:	0000056d 	.word	0x0000056d
 c20:	20000108 	.word	0x20000108
 c24:	20000188 	.word	0x20000188
 c28:	20000000 	.word	0x20000000
 c2c:	00000c9b 	.word	0x00000c9b
 c30:	00000c89 	.word	0x00000c89
 c34:	00000767 	.word	0x00000767
 c38:	000002a9 	.word	0x000002a9
 c3c:	0000079d 	.word	0x0000079d

00000c40 <__libc_init_array>:
 c40:	b570      	push	{r4, r5, r6, lr}
 c42:	2600      	movs	r6, #0
 c44:	4d0c      	ldr	r5, [pc, #48]	; (c78 <__libc_init_array+0x38>)
 c46:	4c0d      	ldr	r4, [pc, #52]	; (c7c <__libc_init_array+0x3c>)
 c48:	1b64      	subs	r4, r4, r5
 c4a:	10a4      	asrs	r4, r4, #2
 c4c:	42a6      	cmp	r6, r4
 c4e:	d109      	bne.n	c64 <__libc_init_array+0x24>
 c50:	2600      	movs	r6, #0
 c52:	f000 f865 	bl	d20 <_init>
 c56:	4d0a      	ldr	r5, [pc, #40]	; (c80 <__libc_init_array+0x40>)
 c58:	4c0a      	ldr	r4, [pc, #40]	; (c84 <__libc_init_array+0x44>)
 c5a:	1b64      	subs	r4, r4, r5
 c5c:	10a4      	asrs	r4, r4, #2
 c5e:	42a6      	cmp	r6, r4
 c60:	d105      	bne.n	c6e <__libc_init_array+0x2e>
 c62:	bd70      	pop	{r4, r5, r6, pc}
 c64:	00b3      	lsls	r3, r6, #2
 c66:	58eb      	ldr	r3, [r5, r3]
 c68:	4798      	blx	r3
 c6a:	3601      	adds	r6, #1
 c6c:	e7ee      	b.n	c4c <__libc_init_array+0xc>
 c6e:	00b3      	lsls	r3, r6, #2
 c70:	58eb      	ldr	r3, [r5, r3]
 c72:	4798      	blx	r3
 c74:	3601      	adds	r6, #1
 c76:	e7f2      	b.n	c5e <__libc_init_array+0x1e>
 c78:	00000d2c 	.word	0x00000d2c
 c7c:	00000d2c 	.word	0x00000d2c
 c80:	00000d2c 	.word	0x00000d2c
 c84:	00000d30 	.word	0x00000d30

00000c88 <memcpy>:
 c88:	2300      	movs	r3, #0
 c8a:	b510      	push	{r4, lr}
 c8c:	429a      	cmp	r2, r3
 c8e:	d100      	bne.n	c92 <memcpy+0xa>
 c90:	bd10      	pop	{r4, pc}
 c92:	5ccc      	ldrb	r4, [r1, r3]
 c94:	54c4      	strb	r4, [r0, r3]
 c96:	3301      	adds	r3, #1
 c98:	e7f8      	b.n	c8c <memcpy+0x4>

00000c9a <memset>:
 c9a:	0003      	movs	r3, r0
 c9c:	1882      	adds	r2, r0, r2
 c9e:	4293      	cmp	r3, r2
 ca0:	d100      	bne.n	ca4 <memset+0xa>
 ca2:	4770      	bx	lr
 ca4:	7019      	strb	r1, [r3, #0]
 ca6:	3301      	adds	r3, #1
 ca8:	e7f9      	b.n	c9e <memset+0x4>
 caa:	0000      	movs	r0, r0
 cac:	682f2e2e 	.word	0x682f2e2e
 cb0:	732f6c61 	.word	0x732f6c61
 cb4:	682f6372 	.word	0x682f6372
 cb8:	695f6c61 	.word	0x695f6c61
 cbc:	00632e6f 	.word	0x00632e6f
 cc0:	682f2e2e 	.word	0x682f2e2e
 cc4:	732f6c61 	.word	0x732f6c61
 cc8:	682f6372 	.word	0x682f6372
 ccc:	755f6c61 	.word	0x755f6c61
 cd0:	74726173 	.word	0x74726173
 cd4:	7973615f 	.word	0x7973615f
 cd8:	632e636e 	.word	0x632e636e
 cdc:	00000000 	.word	0x00000000
 ce0:	682f2e2e 	.word	0x682f2e2e
 ce4:	752f6c61 	.word	0x752f6c61
 ce8:	736c6974 	.word	0x736c6974
 cec:	6372732f 	.word	0x6372732f
 cf0:	6974752f 	.word	0x6974752f
 cf4:	725f736c 	.word	0x725f736c
 cf8:	62676e69 	.word	0x62676e69
 cfc:	65666675 	.word	0x65666675
 d00:	00632e72 	.word	0x00632e72
 d04:	682f2e2e 	.word	0x682f2e2e
 d08:	732f6c70 	.word	0x732f6c70
 d0c:	6f637265 	.word	0x6f637265
 d10:	70682f6d 	.word	0x70682f6d
 d14:	65735f6c 	.word	0x65735f6c
 d18:	6d6f6372 	.word	0x6d6f6372
 d1c:	0000632e 	.word	0x0000632e

00000d20 <_init>:
 d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d22:	46c0      	nop			; (mov r8, r8)
 d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d26:	bc08      	pop	{r3}
 d28:	469e      	mov	lr, r3
 d2a:	4770      	bx	lr

00000d2c <__init_array_start>:
 d2c:	000000e5 	.word	0x000000e5

00000d30 <_fini>:
 d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 d32:	46c0      	nop			; (mov r8, r8)
 d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 d36:	bc08      	pop	{r3}
 d38:	469e      	mov	lr, r3
 d3a:	4770      	bx	lr

00000d3c <__fini_array_start>:
 d3c:	000000bd 	.word	0x000000bd
